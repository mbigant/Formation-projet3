{"version":3,"sources":["store/web3-context.js","components/ENSText.js","utils.js","components/Header.js","components/Footer.js","getWeb3.js","components/Voter.js","pages/ManageVoter.js","components/WorkflowStatusDetails.js","pages/Workflow.js","components/ProposalModal.js","pages/Vote.js","App.js","serviceWorker.js","index.js"],"names":["Web3Context","React","createContext","web3","contract","accounts","owner","contractAddress","contractTxHash","ENSText","props","componentDidMount","getEns","address","state","addressPreview","ens","provider","Web3","providers","HttpProvider","ENS","ensAddress","getEnsAddress","addrPreview","this","slice","getName","then","resp","name","setState","prevProps","prevState","OverlayTrigger","key","placement","overlay","Tooltip","id","className","Badge","bg","string","length","toUpperCase","toLowerCase","Component","Header","Navbar","expand","fixed","Container","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","context","NavDropdown","title","to","activeClassName","Text","contextType","Footer","a","getBlock","blockTimer","setInterval","blockNumber","snapshot","clearInterval","eth","getBlockNumber","bn","getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","enable","console","log","Voter","isRegistered","hasVoted","votedProposalId","instance","methods","getVoter","call","voter","error","Card","Img","variant","src","makeBlockie","Body","Title","ManageVoter","inputAddress","inputError","isValid","voters","workflowStatus","listenerConnected","registerAddress","event","preventDefault","once","addVoter","send","from","on","hash","confirmationNumber","receip","receipt","addressInputHandler","inputVal","target","value","trim","endsWith","getAddress","catch","err","validAddress","utils","toChecksumAddress","events","VoterRegistered","fromBlock","push","returnValues","_voterAddress","match","params","startListeningEvents","getStatus","parseInt","workflowStatusResp","Form","onSubmit","bind","noValidate","validated","Row","Col","InputGroup","hasValidation","FormControl","disabled","onBlur","placeholder","isInvalid","Button","type","Control","Feedback","xs","md","map","Alert","Heading","withRouter","WorkflowStatusDetail","statusValue","currentWorkflowStatus","icon","faIcon","timestamp","parse","format","description","onClick","activate","Workflow","contractDeployedAt","currentStatus","showToast","toast","visible","faTriangleExclamation","message","getCurrentStatus","getEvents","getContractDeployedTimestamp","getTransaction","tx","blockHash","block","getPastEvents","updateEvent","status","_newStatus","WorkflowStatusChange","startProposalsRegistering","endProposalsRegistering","startVotingSession","endVotingSession","tallyVotes","isSuccess","faCheck","WorkflowStatusDetails","faUserPlus","faFileCirclePlus","faCheckToSlot","faTrophy","ToastContainer","position","Toast","show","onClose","closeToast","delay","autohide","ModalContent","Modal","onHide","closeButton","Group","Label","as","rows","onChange","onDescriptionChanged","ProposalModal","ReactDOM","createPortal","document","getElementById","Vote","currentAccount","proposals","showModal","newProposalDescription","voterAddress","result","proposalList","getOneProposal","_proposalId","proposal","voteCount","winningProposalId","winner","i","isWinner","addProposal","res","e","proposalId","setVote","onHideHandler","onSubmitHandler","border","idx","Subtitle","onVote","App","getAccounts","net","getId","networkId","deployedNetwork","VotingContract","networks","Contract","abi","newNetworkId","network","alert","transactionHash","Provider","exact","path","Boolean","location","hostname","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.67375e30.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Web3Context = React.createContext({\n    web3: null,\n    contract: null,\n    accounts: [],\n    owner: null,\n    contractAddress: null,\n    contractTxHash: null\n});\n\nexport default Web3Context;","import React, {Component, Fragment} from \"react\";\nimport Web3 from \"web3\";\nimport ENS, {getEnsAddress} from \"@ensdomains/ensjs\";\nimport {Badge, OverlayTrigger, Tooltip} from \"react-bootstrap\";\nimport * as Utils from \"../utils\";\n\nclass ENSText extends Component {\n\n    constructor(props) {\n\n        super(props);\n\n        this.state = {\n            address: null,\n            addressPreview: null,\n            ens: null\n        };\n\n        const provider = new Web3.providers.HttpProvider(\n            \"https://ropsten.infura.io/v3/d582c7d40d2148f590e23b2d7a812e20\"\n        );\n\n        this.ens = new ENS({ provider, ensAddress: getEnsAddress('1') });\n    }\n\n    getEns( address ) {\n\n        const addrPreview = this.props.address.slice(0,6) + '...' + this.props.address.slice(-4);\n\n        this.ens.getName(address).then( resp => {\n            if( resp.name ) {\n                this.setState({ens: resp.name, addressPreview: addrPreview});\n            }\n            else {\n                this.setState({ens: null, addressPreview: addrPreview});\n            }\n        });\n    }\n\n    componentDidMount = () => {\n        this.getEns(this.props.address);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if( prevProps.address !== this.props.address ) {\n            this.getEns( this.props.address );\n        }\n    }\n\n    render() {\n\n        return (\n            <Fragment>\n                <OverlayTrigger\n                    key={'address'}\n                    placement={'bottom'}\n                    overlay={\n                        <Tooltip id=\"tooltip-address\">\n                            <span className={'font-monospace'}>{this.props.address}</span>\n                        </Tooltip>\n                    }\n                >\n                    <Badge bg=\"primary\">\n                    {\n                        this.state.ens ? Utils.toTitle(this.state.ens) :  <span className={'font-monospace'}>{this.state.addressPreview}</span>\n                    }\n                    </Badge>\n\n                </OverlayTrigger>\n            </Fragment>\n        )\n    }\n}\n\nexport default ENSText;","export function toTitle( string ) {\n    if(  string.length === 0 || string === '' ) {\n        return string;\n    }\n\n    if( string.length === 1 ) {\n        return string.toUpperCase();\n    }\n    else {\n        return string.slice(0, 1).toUpperCase() + '' + string.slice(1).toLowerCase();\n    }\n}","import React, {Component} from \"react\";\nimport {Badge, Container, Nav, Navbar, NavDropdown} from \"react-bootstrap\";\n\nimport \"./header.css\";\nimport {NavLink} from \"react-router-dom\";\nimport Web3Context from \"../store/web3-context\";\nimport ENSText from \"./ENSText\";\n\nclass Header extends Component {\n\n    static contextType = Web3Context;\n\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount = () => {\n\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n\n    }\n\n    render() {\n\n        return (\n            <Navbar bg=\"light\" expand=\"lg\" fixed=\"top\" className=\"header\">\n                <Container>\n                    <Navbar.Brand href=\"#home\">Voting 3.0</Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav className=\"me-auto\">\n                            <Nav.Link href=\"#/\">Vote</Nav.Link>\n                            {\n                                (this.context.accounts.length > 0 && this.context.accounts[0].toLowerCase() === this.context.owner)  &&\n                                // Only owner\n                                <NavDropdown title=\"Admin\" id=\"basic-nav-dropdown\">\n                                    <NavLink to='/admin/voters' activeClassName=\"active\" >Voters</NavLink>\n                                    <NavLink to='/admin/workflow' activeClassName=\"active\" >Workflow</NavLink>\n                                </NavDropdown>\n                            }\n                        </Nav>\n\n                        <Navbar.Collapse className=\"justify-content-end\">\n                            <Navbar.Text>\n                                { this.context.accounts.length > 0 ? <ENSText address={this.context.accounts[0]} /> : <Badge bg=\"danger\">Not connected</Badge> }\n                            </Navbar.Text>\n                        </Navbar.Collapse>\n\n                    </Navbar.Collapse>\n                </Container>\n            </Navbar>\n        );\n    }\n\n}\n\nexport default Header;","import React, {Component} from \"react\";\nimport {Container, Nav, Navbar} from \"react-bootstrap\";\nimport Web3Context from \"../store/web3-context\";\nimport '../components/footer.css';\n\nclass Footer extends Component {\n\n    static contextType = Web3Context;\n\n    constructor(props) {\n        super(props);\n        this.state = {blockNumber: ''};\n    }\n\n    componentDidMount = async () => {\n\n        await this.getBlock();\n\n        this.blockTimer = setInterval(\n            () => this.getBlock(),\n            2000\n        );\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.blockTimer);\n    }\n\n    async getBlock() {\n\n        if( this.context.web3 ) {\n\n            const bn = await this.context.web3.eth.getBlockNumber();\n            this.setState({\n                blockNumber: bn\n            });\n        }\n    }\n\n    render() {\n        return (\n            <Navbar expand=\"lg\" fixed=\"bottom\" className=\"bg-light\">\n                <Container>\n                    { this.context.contractAddress ? <Nav>Contract&nbsp;<span className=\"font-monospace\">{this.context.contractAddress}</span></Nav> : '' }\n                    <Navbar.Collapse className=\"justify-content-end\">\n                        <Navbar.Text>\n                            Block {this.state.blockNumber}\n                        </Navbar.Text>\n                    </Navbar.Collapse>\n                </Container>\n            </Navbar>\n        );\n    }\n\n}\n\nexport default Footer;","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;","import React, {Component, Fragment} from \"react\";\nimport {Badge, Card} from \"react-bootstrap\";\nimport makeBlockie from \"ethereum-blockies-base64\";\nimport Web3Context from \"../store/web3-context\";\n\nclass Voter extends Component {\n\n    static contextType = Web3Context;\n\n    state = {\n        isRegistered: false,\n        hasVoted: false,\n        votedProposalId: null\n    };\n\n    constructor(props) {\n        super(props);\n\n    }\n\n    async componentDidMount() {\n\n        try {\n            const voter = await this.props.instance.methods.getVoter(this.props.address).call();\n            this.setState({\n                isRegistered: voter[0],\n                hasVoted: voter[1],\n                votedProposalId: voter[2]\n            });\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <Card>\n                    <Card.Img variant=\"top\" src={makeBlockie(this.props.address)} />\n                    <Card.Body>\n                        <Card.Title>Voter #{this.props.id}</Card.Title>\n                        <Card.Text>\n                            {this.props.address.slice(-6)}\n                        </Card.Text>\n                        <Badge bg=\"secondary\">{this.state.isRegistered ? 'Registered' : 'Non registered'}</Badge>\n                        {\n                            this.state.hasVoted ?  <Badge bg=\"success\">Voted for #{this.state.votedProposalId}</Badge> : ''\n                        }\n                    </Card.Body>\n                </Card>\n            </Fragment>\n        );\n    }\n\n}\n\nexport default Voter;","import React, {Component, Fragment} from \"react\";\nimport {withRouter} from \"react-router-dom\";\nimport Web3Context from \"../store/web3-context\";\nimport {Alert, Button, Col, Container, Form, FormControl, InputGroup, Row} from \"react-bootstrap\";\nimport Web3 from \"web3\";\nimport Voter from '../components/Voter';\nimport ENS, {getEnsAddress} from \"@ensdomains/ensjs\";\n\n\nclass ManageVoter extends Component {\n\n    static contextType = Web3Context;\n\n    state = {\n        inputAddress: null,\n        inputError: null,\n        isValid: false,\n        contract: null,\n        voters: [],\n        workflowStatus: null\n    };\n\n    listenerConnected = false;\n\n    constructor(props) {\n\n        console.log('contructor')\n        super(props);\n\n        const provider = new Web3.providers.HttpProvider(\n            \"https://ropsten.infura.io/v3/d582c7d40d2148f590e23b2d7a812e20\"\n        );\n\n        this.ens = new ENS({ provider, ensAddress: getEnsAddress('3') }); // 3 = ropsten but doesn't care\n    }\n\n    startListeningEvents() {\n\n        this.listenerConnected = true;\n        const voters = [];\n\n        this.context.contract.events.VoterRegistered({fromBlock: 0})\n            .on('data', event => {\n                voters.push( event.returnValues._voterAddress );\n                this.setState({voters : voters});\n            })\n            .on('error', event => { console.log('error') })\n            .on('connected', event => { console.log('connected') });\n    }\n\n    componentDidMount() {\n        console.log(this.props.match.params)\n        console.log('componentDidMount')\n\n        if( this.context.contract ) {\n            this.startListeningEvents();\n            this.getStatus();\n        }\n    }\n\n    async componentDidUpdate(prevProps, prevState) {\n\n        // got context\n        if( prevState.contract == null && this.state.contract == null && this.context.contract !== null ) {\n\n            this.getStatus();\n\n            if( ! this.listenerConnected ) {\n                this.startListeningEvents();\n            }\n        }\n    }\n\n    async getStatus() {\n        let workflowStatusResp;\n\n        try {\n            workflowStatusResp = parseInt(await this.context.contract.methods.workflowStatus().call());\n        } catch (err) {\n            console.log(err);\n        }\n\n        this.setState({\n            contract: this.context.contract,\n            workflowStatus: workflowStatusResp\n        })\n    }\n\n    registerAddress = (event) => {\n        event.preventDefault();\n\n        this.context.contract.once('VoterRegistered', function(error, event){ console.log(event); });\n\n        this.context.contract.methods.addVoter(this.state.inputAddress).send({from: this.context.accounts[0]})\n            .on('transactionHash', function (hash){\n                console.log('on transactionHash');\n                console.log(hash);\n            })\n            .on('confirmation', function (confirmationNumber, receip){\n                console.log('on confirmation');\n                console.log(confirmationNumber, receip);\n            })\n            .on('receipt', function (receipt){\n                console.log('on receipt');\n                console.log(receipt);\n            })\n            .on('error', function (error, receipt){\n                console.log('on error');\n                console.log(error, receipt);\n            })\n\n    }\n\n    addressInputHandler = (event) => {\n        const inputVal = event.target.value;\n\n        if( inputVal.length > 4 && inputVal.trim().endsWith('.eth') ) {\n            console.log('ens address !')\n\n            this.ens.name(inputVal).getAddress().then( resp => {\n                console.log(resp)\n                if( resp && resp !== '0x0000000000000000000000000000000000000000') {\n                    this.setState({\n                        inputAddress: resp,\n                        isValid: true,\n                        inputError: null\n                    });\n                }\n                else {\n                    this.setState({\n                        inputAddress: null,\n                        isValid: false,\n                        inputError: \"ENS invalide !\"\n                    });\n                }\n            }).catch( err => {\n                console.log(err);\n                this.setState({\n                    inputAddress: null,\n                    isValid: false,\n                    inputError: \"ENS invalide !\"\n                });\n            });\n        }\n        else {\n\n            try {\n                const validAddress = Web3.utils.toChecksumAddress(inputVal)\n                this.setState({\n                    inputAddress: validAddress,\n                    isValid: true,\n                    inputError: null\n                });\n            } catch (err) {\n                this.setState({\n                    inputAddress: null,\n                    isValid: false,\n                    inputError: \"Adresse invalide !\"\n                });\n            }\n        }\n    }\n\n    render() {\n\n        if( this.context.accounts.length > 0 && this.context.accounts[0].toLowerCase() === this.context.owner ) {\n\n            return (\n                <Fragment>\n                    <h1>Voter console</h1>\n                    <Container>\n                        <h4 className=\"mt-4\">Register new voter</h4>\n                        <Form onSubmit={this.registerAddress.bind(this)} noValidate validated={false} >\n                            <Row className=\"align-items-center\">\n                                <Col>\n                                    <InputGroup className=\"mb-2\" hasValidation>\n                                        <InputGroup.Text>Ξ</InputGroup.Text>\n                                        <FormControl\n                                            disabled={this.state.workflowStatus !== 0}\n                                            onBlur={this.addressInputHandler.bind(this)}\n                                            placeholder=\"0x address or ENS\"\n                                            isValid={this.state.isValid}\n                                            isInvalid={this.state.inputError !== null}\n                                        />\n                                        <Button type=\"submit\" variant=\"primary\" disabled={!this.state.isValid}>\n                                            Ajouter\n                                        </Button>\n                                        <Form.Control.Feedback type=\"invalid\">{this.state.inputError}</Form.Control.Feedback>\n                                    </InputGroup>\n                                </Col>\n                            </Row>\n                        </Form>\n                    </Container>\n                    <Container>\n                        <Row>\n                            <Col>\n                                <h4 className=\"mt-4\">Registered voters</h4>\n                                <hr/>\n                                {\n                                    this.state.voters.length > 0 ?\n                                    <Row xs={3} md={6}>\n                                        {this.state.voters.map((address, id) => (\n                                            <Col key={address}>\n                                                <Voter address={address} id={id} instance={this.context.contract} from={this.context.accounts[0]}/>\n                                            </Col>\n                                        ))}\n                                    </Row>\n                                    :\n                                    <p>No voters yet</p>\n                                }\n                            </Col>\n                        </Row>\n                    </Container>\n                </Fragment>\n            );\n\n        }\n        else {\n            return (\n                <Alert variant=\"danger\">\n                    <Alert.Heading>You are not allowed</Alert.Heading>\n                    <p>\n                        Only contract owner authorized here !\n                    </p>\n                </Alert>\n            )\n        }\n\n    }\n}\n\nexport default withRouter(ManageVoter);","import React, {Component} from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport Moment from \"react-moment\";\nimport {Button} from \"react-bootstrap\";\n\nclass WorkflowStatusDetail extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <li className={this.props.statusValue % 2 === 0 ? '' : 'timeline-inverted'}>\n                <div className={this.props.statusValue <= this.props.currentWorkflowStatus ? 'timeline-badge success' : 'timeline-badge'}><FontAwesomeIcon icon={this.props.faIcon}/></div>\n                <div className=\"timeline-panel\">\n                    <div className=\"timeline-heading\">\n                        <h4 className=\"timeline-title\">{this.props.title}</h4>\n                        <p>\n                            <small className=\"text-muted font-monospace\">\n                            { this.props.timestamp ? <Moment parse=\"X\" format=\"YYYY-MM-DD HH:mm\">{this.props.timestamp}</Moment> : 'Soon' }\n                            </small>\n                        </p>\n                    </div>\n                    <div className=\"timeline-body\">\n                        <p>{this.props.description}</p>\n                    </div>\n                    {\n                        this.props.currentWorkflowStatus === (this.props.statusValue -1) &&\n                        <div>\n                            <hr/>\n                            <div className=\"btn-group\">\n                                <Button variant=\"primary\" onClick={this.props.activate}>Activate</Button>\n                            </div>\n                        </div>\n                    }\n                </div>\n            </li>\n        )\n    }\n}\n\nexport default WorkflowStatusDetail;","import React, {Component} from \"react\";\nimport {withRouter} from \"react-router-dom\";\nimport Web3Context from \"../store/web3-context\";\nimport {Alert, Toast, ToastContainer} from \"react-bootstrap\";\nimport '../components/workflow.css'\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport {\n    faCheck,\n    faCheckToSlot,\n    faFileCirclePlus,\n    faTriangleExclamation,\n    faTrophy,\n    faUserPlus\n} from '@fortawesome/free-solid-svg-icons'\nimport WorkflowStatusDetails from \"../components/WorkflowStatusDetails\";\n\n\nclass Workflow extends Component {\n\n    static contextType = Web3Context;\n\n    listenerConnected = false;\n\n    state = {\n        contractDeployedAt: null,\n        currentStatus: null,\n        events : null,\n        showToast: true,\n        toast: {\n            visible: false,\n            icon: faTriangleExclamation,\n            title: '',\n            message: '',\n            variant: 'danger'\n        }\n    };\n\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n        console.log(this.props.match.params)\n\n        if( this.context.contract ) {\n            this.startListeningEvents();\n        }\n\n        if( this.context.web3 ) {\n            this.getCurrentStatus();\n            this.getEvents();\n            this.getContractDeployedTimestamp();\n        }\n\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n\n        if( prevState.contractDeployedAt == null && this.state.contractDeployedAt == null && this.context.contractTxHash != null ) {\n            this.getContractDeployedTimestamp();\n        }\n\n        if( this.state.events == null && this.context.contract ) {\n            this.getEvents();\n        }\n\n        if( !this.listenerConnected && this.context.contract ){\n            this.startListeningEvents();\n        }\n\n        if( prevState.currentStatus == null && this.context.contract ) {\n            this.getCurrentStatus();\n        }\n    }\n\n    getContractDeployedTimestamp() {\n        this.context.web3.eth.getTransaction(this.context.contractTxHash).then( tx => {\n            this.context.web3.eth.getBlock(tx.blockHash).then( block => {\n                if( block.timestamp ) {\n                    this.setState({contractDeployedAt: block.timestamp});\n                }\n            });\n        })\n    }\n\n    getCurrentStatus() {\n\n        this.context.contract.methods.workflowStatus().call().then(resp => {\n            this.setState({currentStatus: parseInt(resp)});\n        });\n    }\n\n    async getEvents() {\n\n        this.context.contract.getPastEvents('WorkflowStatusChange', {fromBlock: 0}).then( events => {\n\n            for( let event of events ) {\n                this.updateEvent(event)\n            }\n\n        });\n    }\n\n    async updateEvent( event ) {\n\n        const status = parseInt(event.returnValues._newStatus);\n\n        const block = await this.context.web3.eth.getBlock(event.blockHash);\n\n        console.log('update event')\n\n        this.setState( (prevState) => {\n\n            if( prevState.events == null ) {\n                let events = {};\n                events[status] = {timestamp: block.timestamp};\n\n                return prevState.events = events;\n            }\n            else {\n\n                return prevState.events[status] = {\n                    timestamp: block.timestamp\n                }\n            }\n\n        });\n\n        if( this.state.currentStatus < status ) {\n            this.setState({currentStatus: status});\n        }\n    }\n\n    startListeningEvents() {\n\n        console.log('start listening events');\n\n        this.listenerConnected = true;\n\n        this.context.contract.events.WorkflowStatusChange()\n            .on('data', event => {\n                this.updateEvent(event)\n            })\n            .on('error', event => { console.log('error') })\n            .on('connected', event => { console.log('connected') });\n    }\n\n    startProposalsRegistering() {\n        console.log('startProposalsRegistering');\n\n        this.context.contract.methods.startProposalsRegistering().send({from: this.context.accounts[0]})\n            .on('transactionHash', function (hash){\n                console.log(hash);\n            })\n            .on('receipt', (receipt) => {\n                this.showToast('Success', 'Workflow successfully updated', true);\n            })\n            .on('error', (error, receipt) => {\n                this.showToast('Error', error.message, false);\n            });\n    }\n\n    endProposalsRegistering() {\n        console.log('endProposalsRegistering');\n\n        this.context.contract.methods.endProposalsRegistering().send({from: this.context.accounts[0]})\n            .on('transactionHash', function (hash){\n                console.log(hash);\n            })\n            .on('receipt', (receipt) => {\n                this.showToast('Success', 'Workflow successfully updated', true);\n            })\n            .on('error', (error, receipt) => {\n                this.showToast('Error', error.message, false);\n            });\n    }\n\n    startVotingSession() {\n        console.log('startVotingSession');\n\n        this.context.contract.methods.startVotingSession().send({from: this.context.accounts[0]})\n            .on('transactionHash', function (hash){\n                console.log(hash);\n            })\n            .on('receipt', (receipt) => {\n                this.showToast('Success', 'Workflow successfully updated', true);\n            })\n            .on('error', (error, receipt) => {\n                this.showToast('Error', error.message, false);\n            });\n    }\n\n    endVotingSession() {\n        console.log('endVotingSession');\n\n        this.context.contract.methods.endVotingSession().send({from: this.context.accounts[0]})\n            .on('transactionHash', function (hash){\n                console.log(hash);\n            })\n            .on('receipt', (receipt) => {\n                this.showToast('Success', 'Workflow successfully updated', true);\n            })\n            .on('error', (error, receipt) => {\n                this.showToast('Error', error.message, false);\n            });\n    }\n\n    tallyVotes() {\n        console.log('tallyVotes');\n\n        this.context.contract.methods.tallyVotes().send({from: this.context.accounts[0]})\n            .on('transactionHash', function (hash){\n                console.log(hash);\n            })\n            .on('receipt', (receipt) => {\n                this.showToast('Success', 'Workflow successfully updated', true);\n            })\n            .on('error', (error, receipt) => {\n                this.showToast('Error', error.message, false);\n            });\n    }\n\n    showToast( title, message, isSuccess ) {\n       const type = isSuccess ? 'success' : 'danger';\n       const faIcon = isSuccess ? faCheck : faTriangleExclamation;\n\n       this.setState({\n           toast: {\n               icon: faIcon,\n               variant: type,\n               title: title,\n               message: message,\n               visible: true,\n           }\n       })\n    }\n\n    closeToast() {\n        this.setState(state => {\n            return state.toast.visible = false;\n        });\n    }\n\n    render() {\n\n        if( this.context.accounts.length > 0 && this.context.accounts[0].toLowerCase() === this.context.owner ) {\n            return (\n                <div className=\"container mb-5\">\n                    <div className=\"page-header\">\n                        <h1 id=\"timeline\">Voting status</h1>\n                    </div>\n                    <ul className=\"timeline\">\n                        <WorkflowStatusDetails\n                            faIcon={faUserPlus}\n                            timestamp={this.state.contractDeployedAt}\n                            title=\"RegisteringVoters\"\n                            description=\"Voters can be registered by admin\"\n                            statusValue={0}\n                            currentWorkflowStatus={this.state.currentStatus}\n                        />\n\n                        <WorkflowStatusDetails\n                            faIcon={faFileCirclePlus}\n                            timestamp={this.state.events && this.state.events[1] ? this.state.events[1].timestamp : null}\n                            title=\"ProposalsRegistrationStarted\"\n                            description=\"Voters can register their proposals\"\n                            statusValue={1}\n                            currentWorkflowStatus={this.state.currentStatus}\n                            activate={this.startProposalsRegistering.bind(this)}\n                        />\n\n                        <WorkflowStatusDetails\n                            faIcon={faFileCirclePlus}\n                            timestamp={this.state.events && this.state.events[2] ? this.state.events[2].timestamp : null}\n                            title=\"ProposalsRegistrationEnded\"\n                            description=\"Registering proposals is now ended\"\n                            statusValue={2}\n                            currentWorkflowStatus={this.state.currentStatus}\n                            activate={this.endProposalsRegistering.bind(this)}\n                        />\n\n                        <WorkflowStatusDetails\n                            faIcon={faCheckToSlot}\n                            timestamp={this.state.events && this.state.events[3] ? this.state.events[3].timestamp : null}\n                            title=\"VotingSessionStarted\"\n                            description=\"Voters can vote for proposals\"\n                            statusValue={3}\n                            currentWorkflowStatus={this.state.currentStatus}\n                            activate={this.startVotingSession.bind(this)}\n                        />\n\n                        <WorkflowStatusDetails\n                            faIcon={faCheckToSlot}\n                            timestamp={this.state.events && this.state.events[4] ? this.state.events[4].timestamp : null}\n                            title=\"VotingSessionEnded\"\n                            description=\"Voter can no longer vote\"\n                            statusValue={4}\n                            currentWorkflowStatus={this.state.currentStatus}\n                            activate={this.endVotingSession.bind(this)}\n                        />\n\n                        <WorkflowStatusDetails\n                            faIcon={faTrophy}\n                            timestamp={this.state.events && this.state.events[5] ? this.state.events[5].timestamp : null}\n                            title=\"VotesTallied\"\n                            description=\"We got a winner !\"\n                            statusValue={5}\n                            currentWorkflowStatus={this.state.currentStatus}\n                            activate={this.tallyVotes.bind(this)}\n                        />\n\n                    </ul>\n                    <ToastContainer className=\"p-3 mb-5\" position=\"bottom-end\">\n                        <Toast show={this.state.toast.visible} onClose={this.closeToast.bind(this)} delay={5000} autohide bg={this.state.toast.variant}>\n                            <Toast.Header>\n                                <strong className=\"me-auto pl-2\">\n                                    <FontAwesomeIcon icon={this.state.toast.icon}/> {this.state.toast.title}\n                                </strong>\n                                <small>just now</small>\n                            </Toast.Header>\n                            <Toast.Body>{this.state.toast.message}</Toast.Body>\n                        </Toast>\n                    </ToastContainer>\n                </div>\n            )\n        }\n        else {\n            return (\n                <Alert variant=\"danger\">\n                    <Alert.Heading>You are not allowed</Alert.Heading>\n                    <p>\n                        Only contract owner authorized here !\n                    </p>\n                </Alert>\n            )\n        }\n\n    }\n}\n\nexport default withRouter(Workflow);","import React, {Component, Fragment} from \"react\";\nimport {Button, Form, Modal} from \"react-bootstrap\";\nimport ReactDOM from \"react-dom\";\n\nconst ModalContent = (props) => {\n    return (\n        <Modal show={props.show} onHide={props.onHide}>\n            <Modal.Header closeButton>\n                <Modal.Title>New proposal</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form>\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label>Description</Form.Label>\n                        <Form.Control as=\"textarea\" rows={3} onChange={props.onDescriptionChanged}/>\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={props.onHide}>\n                    Cancel\n                </Button>\n                <Button variant=\"primary\" onClick={props.onSubmit} disabled={props.disabled}>\n                    Submit\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n\nclass ProposalModal extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <Fragment>\n                {\n                    ReactDOM.createPortal(\n                        <ModalContent\n                            show={this.props.show}\n                            onHide={this.props.onHide}\n                            onSubmit={this.props.onSubmit}\n                            onDescriptionChanged={this.props.onDescriptionChanged}\n                            disabled={this.props.disabled}\n                        />,\n                        document.getElementById('modal-root'))\n                }\n            </Fragment>\n        )\n    }\n}\n\nexport default ProposalModal;","import React, {Component} from \"react\";\nimport Web3Context from \"../store/web3-context\";\nimport {Alert, Button, Card, Col, Container, Row} from \"react-bootstrap\";\nimport ProposalModal from \"../components/ProposalModal\";\nimport Moment from \"react-moment\";\nimport './vote.css';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faTrophy} from \"@fortawesome/free-solid-svg-icons\";\n\nclass Vote extends Component {\n\n    static contextType = Web3Context;\n\n    state = {\n        voter: null,\n        currentAccount: null,\n        proposals: null,\n        workflowStatus: null,\n        showModal: false,\n        newProposalDescription: null,\n    }\n\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n\n    }\n\n    async componentDidUpdate(prevProps, prevState) {\n\n        if( this.context.accounts.length > 0 && this.context.accounts[0] !== this.state.currentAccount ) {\n\n            console.log('account changed');\n\n            let voterFound = false;\n            const events = await this.context.contract.getPastEvents('VoterRegistered', {fromBlock: 0});\n\n            for( let event of events ) {\n                const voterAddress = event.returnValues._voterAddress.toLowerCase();\n\n                if( voterAddress === this.context.accounts[0].toLowerCase() ) {\n                    voterFound = true;\n                    const result = await this.context.contract.methods.getVoter(voterAddress).call({from: voterAddress});\n\n                    const voter = {\n                        isRegistered: result[0],\n                        hasVoted: result[1],\n                        votedProposalId: result[2]\n                    };\n\n                    this.setState({\n                        currentAccount: this.context.accounts[0],\n                        voter: voter\n                    });\n\n                    return;\n                }\n            }\n\n            this.setState({\n                currentAccount: this.context.accounts[0],\n                voter: null\n            });\n\n        }\n\n        if( this.context.contract && this.state.proposals == null && prevState.proposals == null && this.state.voter && this.state.voter.isRegistered) {\n\n            console.log('fetch proposals')\n\n            const events = await this.context.contract.getPastEvents('ProposalRegistered', {fromBlock: 0});\n\n            const proposalList = [];\n\n            for( let event of events ) {\n\n                const block = await this.context.web3.eth.getBlock(event.blockHash);\n                const proposal = await this.context.contract.methods.getOneProposal(event.returnValues._proposalId).call({from: this.context.accounts[0]});\n\n                proposalList.push({\n                    id: event.returnValues._proposalId,\n                    description: proposal.description,\n                    voteCount: proposal.voteCount,\n                    timestamp: block.timestamp\n                })\n            }\n\n            this.setState({proposals: proposalList});\n        }\n\n        if( this.context.contract && this.state.workflowStatus == null ) {\n\n            console.log('get workflowStatus');\n\n            const result = await this.context.contract.methods.workflowStatus().call();\n\n            this.setState({\n                workflowStatus: parseInt(result)\n            })\n\n            if( parseInt(result) === 5 ) {\n\n                const winner = await this.context.contract.methods.winningProposalId().call();\n                console.log(winner)\n\n                for( let i in this.state.proposals ) {\n\n                    if( this.state.proposals[i].id === winner ) {\n\n                        this.setState((prevState) => {\n                            return prevState.proposals[i].isWinner = true;\n                        });\n                        break;\n                    }\n                }\n            }\n\n        }\n\n    }\n\n    onHideHandler() {\n        this.setState({showModal: false});\n    }\n\n    onSubmitHandler() {\n\n        this.context.contract.once('ProposalRegistered', (err, event) => {\n\n            this.context.web3.eth.getBlock(event.blockHash).then( block => {\n\n                this.context.contract.methods.getOneProposal(event.returnValues._proposalId).call({from: this.context.accounts[0]}).then( proposal => {\n\n                    this.setState( (prevState) => {\n                        return prevState.proposals.push({\n                            id: event.returnValues._proposalId,\n                            description: proposal.description,\n                            voteCount: proposal.voteCount,\n                            timestamp: block.timestamp\n                        });\n                    });\n                });\n            });\n\n\n        });\n\n        this.context.contract.methods.addProposal(this.state.newProposalDescription).send({from: this.context.accounts[0]}).then( res => {\n            console.log(res); // todo toast\n        });\n\n        this.setState({\n            newProposalDescription: null,\n            showModal: false\n        });\n    }\n\n    onDescriptionChanged(e) {\n        this.setState({newProposalDescription: e.target.value});\n    }\n\n    showModal() {\n        this.setState({showModal: true});\n    }\n\n    onVote( proposalId ) {\n        this.context.contract.once('Voted', (err, event) => {\n            if( !err ) {\n                for( let i in this.state.proposals ) {\n                    if( parseInt(this.state.proposals[i].id) === parseInt(event.returnValues._proposalId) ) {\n                        this.setState((prevState) => {\n                            return prevState.proposals[i].voteCount++;\n                        });\n                        break;\n                    }\n                }\n            }\n        });\n\n        this.context.contract.methods.setVote(proposalId).send({from : this.context.accounts[0]}).then( res => {\n\n            this.setState( (prevState) => {\n                prevState.voter.votedProposalId = proposalId;\n                prevState.voter.hasVoted = true;\n                return prevState;\n            });\n        }).catch(err => {\n            console.log(err)\n        });\n    }\n\n    render() {\n\n        if ( this.state.voter && this.state.voter.isRegistered ) {\n            return (\n                <Container className=\"mb-5\">\n                    <h1 className=\"mb-4\">Proposals</h1>\n                    {\n                        this.state.workflowStatus < 1 &&\n                        <Alert variant=\"warning\">\n                            <p>\n                                Proposal registration not started !\n                            </p>\n                        </Alert>\n                    }\n                    <ProposalModal\n                        show={this.state.showModal}\n                        disabled={this.state.newProposalDescription == null || this.state.newProposalDescription.length === 0}\n                        onHide={this.onHideHandler.bind(this)}\n                        onSubmit={this.onSubmitHandler.bind(this)}\n                        onDescriptionChanged={this.onDescriptionChanged.bind(this)}\n                    />\n                    <Row xs={1} md={3} className=\"g-4\">\n                        { this.state.workflowStatus === 1 && (\n                            <Col>\n                                <Card border=\"primary\">\n                                    <Card.Body>\n                                        <Card.Title>Add Proposal</Card.Title>\n                                        <Card.Text>\n                                            You can submit your own proposal !\n                                        </Card.Text>\n                                        <Button variant=\"primary\" onClick={this.showModal.bind(this)}>Submit my proposal</Button>\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                        )}\n                        { this.state.proposals && this.state.proposals.map((proposal, idx) => (\n                            <Col key={idx}>\n                                <Card className=\"position-relative\"  border={proposal.isWinner ? 'success' : ''}>\n                                    { this.state.workflowStatus > 2 && proposal.voteCount > 0 && <span className={`position-absolute top-0 start-50 translate-middle badge rounded-pill ${proposal.isWinner ? 'bg-success': 'bg-primary'}`}>{proposal.isWinner ? 'Winner - ' : ''} {proposal.voteCount} vote{proposal.voteCount > 1 ? 's' : ''}</span> }\n\n                                    <Card.Body>\n                                        <Card.Title>\n                                            Proposal #{proposal.id}\n                                        </Card.Title>\n                                        <Card.Subtitle className=\"mb-2 text-muted fs-6 font-monospace\"><Moment parse=\"X\" format=\"YYYY-MM-DD HH:mm\">{proposal.timestamp}</Moment></Card.Subtitle>\n                                        <Card.Text>\n                                            { proposal.isWinner && <div><FontAwesomeIcon className=\"text-success\" icon={faTrophy}/></div> }\n                                            {proposal.description}\n                                        </Card.Text>\n                                        { this.state.workflowStatus === 3 && ! this.state.voter.hasVoted && <Button variant=\"outline-primary\" onClick={this.onVote.bind(this, proposal.id)}>Vote for me !</Button> }\n                                    </Card.Body>\n                                    <Card.Footer className=\"text-muted\">\n                                        { this.state.workflowStatus < 3 ? 'Voting session not opened' :  this.state.voter.hasVoted && this.state.voter.votedProposalId === proposal.id ? 'Your choice' : this.state.workflowStatus > 3 ? 'Vote closed': 'Vote opened'}\n                                    </Card.Footer>\n                                </Card>\n                            </Col>\n                        ))}\n                    </Row>\n                </Container>\n            )\n        }\n        else {\n            return (\n                <Alert variant=\"danger\">\n                    <Alert.Heading>Only voter</Alert.Heading>\n                    <p>\n                        You are not a voter !\n                    </p>\n                </Alert>\n            )\n        }\n\n    }\n\n}\n\nexport default Vote;","import React, {Component} from \"react\";\nimport {Container} from \"react-bootstrap\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Web3Context from \"./store/web3-context\";\nimport getWeb3 from \"./getWeb3\";\nimport VotingContract from \"./contracts/Voting.json\";\nimport {Route, Switch} from \"react-router-dom\";\nimport ManageVoter from \"./pages/ManageVoter\";\nimport Workflow from \"./pages/Workflow\";\nimport Vote from \"./pages/Vote\";\n\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            accounts: [],\n            contract: null,\n            owner: null,\n            contractAddress: null,\n            contractTxHash: null,\n        };\n    }\n\n    componentDidMount = async () => {\n\n        try {\n            // Get network provider and web3 instance.\n            const web3 = await getWeb3();\n            //web3.eth.handleRevert = true;\n\n            // Use web3 to get the user's accounts.\n            const accounts = await web3.eth.getAccounts();\n\n            // Get the contract instance.\n            const networkId = await web3.eth.net.getId();\n            const deployedNetwork = VotingContract.networks[networkId];\n            const instance = new web3.eth.Contract(\n                VotingContract.abi,\n                deployedNetwork && deployedNetwork.address,\n            );\n\n            const owner = await instance.methods.owner().call();\n\n            if( window.ethereum ) {\n                // detect Metamask account change\n                window.ethereum.on('accountsChanged', (accounts) => {\n                    this.setState({accounts})\n                });\n\n                // detect Network account change\n                window.ethereum.on('networkChanged', (newNetworkId) => {\n\n                    const network = VotingContract.networks[newNetworkId];\n\n                    if( network ) {\n                        const instance = new web3.eth.Contract(\n                            VotingContract.abi,\n                            network.address,\n                        );\n\n                        this.setState({contract: instance});\n                    }\n                    else {\n                        alert(`Unsuported network ! Please change`);\n                    }\n\n                });\n            }\n\n\n            // Set web3, accounts, and contract to the state, and then proceed with an\n            // example of interacting with the contract's methods.\n            this.setState({web3, accounts, contract: instance, owner: owner.toLowerCase(), contractAddress: deployedNetwork.address, contractTxHash: deployedNetwork.transactionHash });\n\n        } catch (error) {\n            // Catch any errors for any of the above operations.\n            alert(\n                `Failed to load web3, accounts, or contract. Check console for details.`,\n            );\n            console.error(error);\n        }\n    };\n\n    render() {\n\n        return (\n            <Web3Context.Provider value={{ web3: this.state.web3, contract: this.state.contract, accounts: this.state.accounts, owner: this.state.owner, contractAddress: this.state.contractAddress, contractTxHash: this.state.contractTxHash }}>\n                    <div className=\"App\">\n                        <Header/>\n                        <Container className=\"main\">\n                            <Switch>\n                                <Route exact path=\"/\">\n                                    <Vote/>\n                                </Route>\n                                <Route path=\"/admin/voters/\">\n                                    <ManageVoter/>\n                                </Route>\n                                <Route path=\"/admin/workflow/\">\n                                    <Workflow/>\n                                </Route>\n                                <Route exact path=\"/proposals/\">\n                                    <h1>proposals</h1>\n                                </Route>\n                                <Route path=\"/proposals/:id\">\n                                    <h1>proposal detail</h1>\n                                </Route>\n                            </Switch>\n                        </Container>\n                        <Footer/>\n                    </div>\n            </Web3Context.Provider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <HashRouter>\n        <App />\n    </HashRouter>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}